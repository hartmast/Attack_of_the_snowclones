coll <- coll[ , -1] # remove first column
coll <- t(coll) # switch rows and columns
# get expected frequencies
coll <- as.matrix(coll)
coll.exp <- chisq.test(coll)$expected
coll.PMI <- log2(coll / coll.exp)
coll.PPMI <- ifelse(coll.PMI < 0, 0, coll.PMI)
# cosine similarity function
# (adopted from Levshina's [2015] Rling package)
nr <- nrow(coll)
m <- matrix(NA, nr, nr)
colnames(m) <- rownames(m) <- rownames(coll)
# export
# saveRDS(m, "m.Rds")
m <- readRDS("../ENCOW_x_is_the_new_y/distsem/m.Rds")
# get distances
m2 <- 1 - (m / max(m[m<1]))
# backup copy
m2_matrix <- m2
# as.dist
m2 <- as.dist(m2)
# as matrix
m2_matrix <- as.matrix(m2, varnames = c("row", "col"))
coll
?mds
?cmdscale
# clustering
for(i in 1:20) {
clust <- cluster::pam(m2, i)
print(clust$silinfo$avg.width)
}
(p1 <- ggplot(m3, aes(x = dim1, y = dim2, label = Lemma)) +
geom_text_repel(aes(size = log1p(freq)*2)) +
scale_color_discrete(terrain.colors(14)) +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
# mds
m3 <- cmdscale(m2)
m3 <- rownames_to_column(as.data.frame(m3))
colnames(m3) <- c("Lemma", "dim1", "dim2")
(p1 <- ggplot(m3, aes(x = dim1, y = dim2, label = Lemma)) +
geom_text_repel(aes(size = log1p(freq)*2)) +
scale_color_discrete(terrain.colors(14)) +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
l
# add frequency information
m3 <- left_join(m3, l, by = c("Lemma" = "word"))
m3
m3 %>% head
d$lemma_head_x
m3$freq_x <- sapply(1:nrow(m3), function(i) length(which(d$lemma_head_x == m3$lemma_head[i])))
m3$freq_y <- sapply(1:nrow(m3), function(i) length(which(d$lemma_head_y == m3$lemma_head[i])))
m3$freq <- m3$freq_x + m3$freq_y
(p1 <- ggplot(m3, aes(x = dim1, y = dim2, label = Lemma)) +
geom_text_repel(aes(size = log1p(freq)*2)) +
scale_color_discrete(terrain.colors(14)) +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
p1
m3
m3$freq
which(m3$freq > 0)
m3$freq_x
m3$freq_y
m3$lemma
m3$freq_x <- sapply(1:nrow(m3), function(i) length(which(d$lemma_head_x == m3$lemma[i])))
m3$freq_y <- sapply(1:nrow(m3), function(i) length(which(d$lemma_head_y == m3$lemma[i])))
m3$freq <- m3$freq_x + m3$freq_y
m3$freq
(p1 <- ggplot(filter(m3, freq >= 10), aes(x = dim1, y = dim2, label = Lemma)) +
geom_text_repel(aes(size = log1p(freq)*2)) +
scale_color_discrete(terrain.colors(14)) +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
# Clusters
m2_clust <- cluster::pam(m2, 14)
m2_cluster <- m2_clust$clustering %>% as.data.frame()
m2_cluster <- rownames_to_column(m2_cluster)
colnames(m2_cluster) <- c("Lemma", "Cluster")
m2_cluster
m2_cluster$Cluster
# join dataframes
colnames(m3)
# join dataframes
left_join(m3, m2_cluster)
# join dataframes
m3 <- left_join(m3, m2_cluster)
(p1 <- ggplot(filter(m3, freq >= 10), aes(x = dim1, y = dim2, label = Lemma, color = factor(Cluster))) +
geom_text_repel(aes(size = log1p(freq)*2)) +
scale_color_discrete(terrain.colors(14)) +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
(p1 <- ggplot(filter(m3, freq >= 10), aes(x = dim1, y = dim2, label = Lemma, group = factor(Cluster))) +
geom_text_repel(aes(size = log1p(freq)*2)) +
scale_color_discrete(terrain.colors(14)) +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
(p1 <- ggplot(filter(m3, freq >= 10), aes(x = dim1, y = dim2, label = Lemma, col = factor(Cluster))) +
geom_text_repel(aes(size = log1p(freq)*2)) +
scale_color_discrete(terrain.colors(14)) +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
# add Cosine distance to original dataframe
d$cosine_distance <- NA
for(i in 1:nrow(d)) {
if(d$lemma_head_x[i] %in% colnames(m2_matrix) &&
d$lemma_head_y[i] %in% rownames(m2_matrix)) {
d$cosine_distance[i] <- m2_matrix[which(colnames(m2_matrix) == d$lemma_head_x[i]),
which(rownames(m2_matrix) == d$lemma_head_y[i])]
}
}
# add column with x and y
d$lemma_heads <- character(nrow(d))
d$lemma_heads <- paste(d$lemma_head_x, d$lemma_head_y, sep = "/")
d %>% arrange(desc(cosine_distance)) %>%
select(lemma_head_x, lemma_head_y, cosine_distance) %>% na.omit %>%
unique # %>% write_excel_csv("cosine_distances.csv")
d %>% arrange(desc(cosine_distance)) %>%
select(lemma_head_x, lemma_head_y, cosine_distance) %>% na.omit %>%
unique
library(DT)
library(DT)
d
m3
(p1 <- ggplot(filter(m3, freq >= 5), aes(x = dim1, y = dim2, label = Lemma, col = factor(Cluster))) +
geom_text_repel(aes(size = log1p(freq)*2)) +
scale_color_discrete(terrain.colors(14)) +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
(p1 <- ggplot(filter(m3, freq >= 7), aes(x = dim1, y = dim2, label = Lemma, col = factor(Cluster))) +
geom_text_repel(aes(size = log1p(freq)*2)) +
scale_color_discrete(terrain.colors(14)) +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
(p1 <- ggplot(filter(m3, freq >= 9), aes(x = dim1, y = dim2, label = Lemma, col = factor(Cluster))) +
geom_text_repel(aes(size = log1p(freq)*2)) +
scale_color_discrete(terrain.colors(14)) +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
(p1 <- ggplot(filter(m3, freq >= 10), aes(x = dim1, y = dim2, label = Lemma, col = factor(Cluster))) +
geom_text_repel(aes(size = log1p(freq)*2)) +
scale_color_discrete(terrain.colors(14)) +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
(p1 <- ggplot(filter(m3, freq >= 7), aes(x = dim1, y = dim2, label = Lemma, col = factor(Cluster))) +
geom_text_repel(aes(size = log1p(freq)*2)) +
scale_color_discrete(terrain.colors(14)) +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
?ggrepel
(p1 <- ggplot(filter(m3, freq >= 5), aes(x = dim1, y = dim2, label = Lemma, col = factor(Cluster))) +
geom_text_repel(aes(size = log1p(freq)*2), max.overlaps = 15) +
scale_color_discrete(terrain.colors(14)) +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
# add relative freqeuency in x and y slot
m3$rel_x <- m3$freq_x / (m3$freq_x + m3$freq_y)
m3$rel_y <- m3$freq_y / (m3$freq_x + m3$freq_y)
m3 <- replace_na(m3, list(rel_x = 0, rel_y = 0))
(p2 <- ggplot(filter(m3, freq >= 5), aes(x = dim1, y = dim2, label = Lemma, col = rel_x)) +
geom_text_repel(aes(size = log1p(freq)*2), max.overlaps = 15) +
scale_color_discrete(terrain.colors(14)) +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
(p2 <- ggplot(filter(m3, freq >= 5), aes(x = dim1, y = dim2, label = Lemma, col = rel_x)) +
geom_text_repel(aes(size = log1p(freq)*2), max.overlaps = 15) +
scale_color_continuous(low = "blue", high = "red") +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
(p2 <- ggplot(filter(m3, freq >= 5), aes(x = dim1, y = dim2, label = Lemma, col = rel_x)) +
geom_text_repel(aes(size = log1p(freq)*2), max.overlaps = 15) +
scale_color_continuous(low = "blue", high = "red") +
guides(col = F, size = F) + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
?guides
(p2 <- ggplot(filter(m3, freq >= 5), aes(x = dim1, y = dim2, label = Lemma, col = rel_x)) +
geom_text_repel(aes(size = log1p(freq)*2), max.overlaps = 15) +
scale_color_continuous(low = "blue", high = "red") +
guides(col = "none", size = "none") + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
(p1 <- ggplot(filter(m3, freq >= 5), aes(x = dim1, y = dim2, label = Lemma, col = factor(Cluster))) +
geom_text_repel(aes(size = log1p(freq)*2), max.overlaps = 15) +
scale_color_discrete(terrain.colors(14)) +
guides(col = "none", size = "none") + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
ggsave("distsem01.png", width = 8, height = 8)
(p2 <- ggplot(filter(m3, freq >= 5), aes(x = dim1, y = dim2, label = Lemma, col = rel_x)) +
geom_text_repel(aes(size = log1p(freq)*2), max.overlaps = 15) +
scale_color_continuous(low = "blue", high = "red") +
guides(col = "none", size = "none") + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
ggsave("distsem02.png", width = 8, height = 8)
m3
set.seed(1985)
(p1 <- ggplot(filter(m3, freq >= 5), aes(x = dim1, y = dim2, label = Lemma, col = factor(Cluster))) +
geom_text_repel(aes(size = log1p(freq)*2), max.overlaps = 15) +
scale_color_discrete(terrain.colors(14)) +
guides(col = "none", size = "none") + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
ggsave("distsem01.png", width = 8, height = 8)
set.seed(1985)
(p2 <- ggplot(filter(m3, freq >= 5), aes(x = dim1, y = dim2, label = Lemma, col = rel_x)) +
geom_text_repel(aes(size = log1p(freq)*2), max.overlaps = 15) +
scale_color_continuous(low = "blue", high = "red") +
guides(col = "none", size = "none") + theme_bw() + theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 10)) )
ggsave("distsem02.png", width = 8, height = 8)
lx
colnames(lx)
Sys.Date()
# install CRAN packages (if not yet installed)
sapply(c("data.table", "tidyverse", "devtools", "readxl", "kableExtra", "ngram", "networkD3", "igraph", "network", "patchwork", "koRpus", "pbapply", "tidytext", "cluster", "ggrepel", "animation"), function(x) if(!is.element(x, installed.packages())) install.packages(x, dependencies = T))
# install non-CRAN packages (if not yet installed)
if(!is.element("concordances", installed.packages())) {
devtools::install_github("hartmast/concordances")
}
# if this doesn't work, check sfla.ch for the package
if(!is.element("collostructions", installed.packages())) {
install.packages("https://sfla.ch/wp-content/uploads/2021/02/collostructions_0.2.0.tar.gz", repos = NULL)
}
# install "concordances" if not yet installed
if(!is.element("concordances", installed.packages())) {
devtools::install_github("hartmast/concordances", ref = "f4ca785
")
}
# load "concordances"
library(concordances)
library(tidyverse)
library(readxl)
library(data.table)
library(kableExtra)
library(collostructions)
d <- getNSE("mother_of_all.xml", xml = TRUE, context_tags = FALSE, verbose = FALSE)
# write_excel_csv(d, "mother_of_all_ENCOW.csv")
d <- read_xlsx("mother_of_all_ENCOW.xlsx")
d <- filter(d, keep == "y")
encow <- fread("/Volumes/My Passport/ENCOW word lists/encow16ax.lp.tsv",
header = F)
encow <- fread("/Volumes/My Passport/ENCOW word lists/encow16ax.lp.tsv",
header = F)
encow
# load "concordances"
library(concordances)
library(tidyverse)
library(readxl)
library(data.table)
library(kableExtra)
library(collostructions)
d <- getNSE("mother_of_all.xml", xml = TRUE, context_tags = FALSE, verbose = FALSE)
# write_excel_csv(d, "mother_of_all_ENCOW.csv")
d <- read_xlsx("mother_of_all_ENCOW.xlsx")
d <- filter(d, keep == "y")
encow <- fread("/Volumes/My Passport/ENCOW word lists/encow16ax.lp.tsv",
header = F)
# only nouns
encow <- encow[V2 %in% c("NN", "NE")]
colnames(encow) <- c("Lemma", "POS", "Freq")
# load "concordances"
library(concordances)
library(tidyverse)
library(readxl)
library(data.table)
library(kableExtra)
library(collostructions)
# load packages
library(readxl)
library(tidyverse)
library(ngram)
library(networkD3)
library(igraph)
library(network)
library(patchwork)
library(koRpus)
library(pbapply)
library(tidytext)
library(cluster)
library(ggrepel)
library(animation)
library(kableExtra)
library(DT)
library(collostructions) # available at sflach.ch
library(concordances) #available at github.com/hartmast/concordances
# logarithmize and return 0 instead of Inf if x==0
log0 <- function(x) {
x <- ifelse(x == 0, 0, log(x))
return(x)
}
# function for "prettyfying" df output
# inspired by https://github.com/rmcelreath/rethinking/blob/d0978c7f8b6329b94efa2014658d750ae12b1fa2/R/utilities.r
pretty_df <- function(df) {
# function for rounding
round_this <- function(x, digits = 2) ifelse(x < 1, signif(x, digits = digits), round(x, digits = 2))
# function for getting prettyfied dataframe
df_pretty <- as.data.frame(lapply(1:length(df),
function(i) if(!class(df[[i]]) %in% c("character", "factor"))
{
round_this(df[[i]])
} else {
return(df[[i]])
})
)
# set names to original names
colnames(df_pretty) <- colnames(df)
return(df_pretty)
}
# search for entire words
grepw <- function(pattern, x, perl = F, ...) {
grep(paste("^", pattern, "$", sep="", collapse=""), x, perl = perl, ...)
}
d <- read_xlsx("ENCOW_x_is_the_new_y_without_false_hits.xlsx")
d <- filter(d, keep == "y")
d$wordcount_x <- sapply(1:nrow(d), function(i) wordcount(trimws(d$Lemma_x[i])))
d$wordcount_y <- sapply(1:nrow(d), function(i) wordcount(trimws(d$Lemma_y[i])))
# empty columns for heads
d$head_x <- NA; d$head_y <- NA
# add wordcount for x and y lemmas
d$wordcount_x <- sapply(1:nrow(d), function(i) wordcount(trimws(d$Lemma_x[i])))
d$wordcount_y <- sapply(1:nrow(d), function(i) wordcount(trimws(d$Lemma_y[i])))
# get heads
for(i in 1:nrow(d)) {
if(d$wordcount_x[i]>1) {
if(d$pos_x[i]!="NE" & grepl("[A-Z]{2,}", d$Lemma_x[i])) {
d$head_x[i] <- tolower(unlist(strsplit(d$Lemma_x[i], " "))[grepl("[A-Z]{2,}", unlist(strsplit(d$Lemma_x[i], " ")))][1])
} else{
temp <- unlist(strsplit(d$Lemma_x[i], " "))
d$head_x[i] <- tolower(temp[length(temp)])
}
} else {
d$head_x[i] <- tolower(d$Lemma_x[i])
}
if(d$wordcount_y[i]>1) {
if(d$pos_y[i]!="NE" & grepl("[A-Z]{2,}", d$Lemma_y[i])) {
d$head_y[i] <- tolower(unlist(strsplit(d$Lemma_y[i], " "))[grepl("[A-Z]{2,}", unlist(strsplit(d$Lemma_y[i], " ")))][1])
} else{
temp <- unlist(strsplit(d$Lemma_y[i], " "))
d$head_y[i] <- tolower(temp[length(temp)])
}
} else {
d$head_y[i] <- tolower(d$Lemma_y[i])
}
}
# backup copy for subsequent analysis
d_backup <- d
d <- d[-which(d$concept_x=="unclear" | d$concept_y=="unclear"),]
# network ----------------------------------------------------------------
d$concept_x <- factor(d$concept_x); d$concept_y <- factor(d$concept_y)
tbl <- d %>% select(concept_x, concept_y) %>% table %>% as.data.frame
tbl$number_x <- as.numeric(factor(tbl$concept_x))
tbl$number_y <- as.numeric(factor(tbl$concept_y))
# add a column in which the frequency is 0 if
# concept_x == concept_y
tbl$Freq_noself <- ifelse(tbl$concept_x == tbl$concept_y, NA, tbl$Freq)
conc_by_freq <- d$concept_x %>% table %>% sort(decreasing = T) %>% rownames()
tbl$concept_x <- factor(tbl$concept_x, levels = conc_by_freq)
tbl$concept_y <- factor(tbl$concept_y, levels = conc_by_freq)
tbl %>% ggplot(aes(x = concept_x, y = concept_y, fill = log0(Freq))) +
geom_tile() + scale_fill_gradient(low = "yellow", high = "darkred") +
theme(axis.text.x = element_text(angle=45, hjust=.9)) +
guides(fill = guide_legend(title = "LogFreq"))
( p1 <- tbl %>% filter(Freq > 0) %>% ggplot(aes(x = concept_x, y = concept_y, fill = log0(Freq), label = Freq)) +
geom_tile() + scale_fill_gradient(low = "yellow", high = "darkred") +
guides(fill = guide_legend(title = "LogFreq")) + theme_classic() +
theme(axis.text.x = element_text(angle=45, hjust=.9)) +
geom_text(col = ifelse(log(filter(tbl, Freq > 0)$Freq > 6), "black", "white"), size = 4) +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
)
( p2 <- tbl %>% filter(Freq > 0) %>%
ggplot(aes(x = concept_x, y = concept_y, fill = log0(Freq_noself), label = Freq_noself)) +
geom_tile() + scale_fill_gradient(low = "yellow", high = "darkred") +
guides(fill = guide_legend(title = "LogFreq")) + theme_classic() +
theme(axis.text.x = element_text(angle=45, hjust=.9)) +
geom_text(col = ifelse(log(filter(tbl, Freq > 0)$Freq_noself > 6), "black", "white"), size = 4) ) +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
# export heads for lemmatization ------------------------------------------
c(d %>% filter(!(concept_x=="person" & pos_x=="NE")) %>% select(head_x),
d %>% filter(!(concept_y=="person" & pos_y=="NE")) %>% select(head_y)) %>%
unlist %>% unique %>% as.data.frame
l <- read_csv("lemmatization.csv")
lx <- left_join(tibble(word = d$head_x),
l) %>% na.omit %>% select(lemma) %>% table %>% as.data.frame(stringsAsFactors = F) %>% setNames(c("lemma", "Freq"))
ly <- left_join(tibble(word = d$head_y),
l) %>% na.omit %>% select(lemma) %>% table %>% as.data.frame(stringsAsFactors = F) %>% setNames(c("lemma", "Freq"))
encow <- read_csv("x_is_the_new_y_encow_frequencies.csv")
# add frequencies -----------------------------------------------
lx$Freq_encow <- sapply(1:nrow(lx), function(i) sum(encow[grepw(lx$lemma[i], encow$word),]$Freq_encow))
ly$Freq_encow <- sapply(1:nrow(ly), function(i) sum(encow[grepw(ly$lemma[i], encow$word),]$Freq_encow))
# omit all that are not attested in ENCOW
lx <- filter(lx, Freq_encow > 0)
ly <- filter(ly, Freq_encow > 0)
collex.dist(lx) %>% datatable() %>% formatSignif(columns = c("E.CXN1", "E.CXN2", "COLL.STR.LOGL"), digits=3)
collex.dist(ly) %>% datatable() %>% formatSignif(columns = c("E.CXN1", "E.CXN2", "COLL.STR.LOGL"), digits=3)
d <- left_join(d, rename(l, c(lemma_head_x = lemma)), by = c("head_x" = "word"), all.x = T)
d <- left_join(d, rename(l, c(lemma_head_y = lemma)), by = c("head_y" = "word"), all.x = T)
# fill NA head columns
d$lemma_head_x <- ifelse(is.na(d$lemma_head_x), d$head_x, d$lemma_head_x)
d$lemma_head_y <- ifelse(is.na(d$lemma_head_y), d$head_y, d$lemma_head_y)
# load "concordances"
library(concordances)
library(tidyverse)
library(readxl)
library(data.table)
library(kableExtra)
library(collostructions)
d <- getNSE("mother_of_all.xml", xml = TRUE, context_tags = FALSE, verbose = FALSE)
# write_excel_csv(d, "mother_of_all_ENCOW.csv")
d <- read_xlsx("mother_of_all_ENCOW.xlsx")
d <- filter(d, keep == "y")
# frequency table
d_tbl <- d %>% select(lemma) %>% table %>% as_tibble() %>% rename(c(lemma = ".", Freq = "n")) %>% arrange(desc(Freq))
tibble(
# types
Types = nrow(d_tbl),
# tokens
Tokens = sum(d_tbl$Freq),
# hapax legomena
"Hapax Legomena" = length(which(d_tbl$Freq==1))
) %>% kbl() %>% kable_material(c("striped", "hover"))
